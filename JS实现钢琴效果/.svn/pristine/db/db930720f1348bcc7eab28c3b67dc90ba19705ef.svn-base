<template>
  <el-popover placement="bottom" trigger="click" :width="width" @hide="hidePopover">
    <el-input v-if="search === 'search'" placeholder="输入关键字进行过滤" v-model="filterText" style="margin-bottom:10px;"></el-input>
    <el-scrollbar wrapClass="scrollbar-wrapper" style='height:300px;'>
      <!-- 多选人员 -->
      <el-tree
        v-if="type === 'checkbox'"
        accordion
        :data="data"
        :props="props"
        show-checkbox
        node-key="mdn"
        :filter-node-method="filterNode"
        @check-change="checkbox"
        :default-checked-keys="defaultChecked"
        ref="treeCheck">
        <span class="customNode" slot-scope="{ node, data }">
          <i class="iconfont icon-qunzu" v-if="data.isDep === 0"></i>
          <i class="iconfont icon-renyuan" v-if="data.isDep === 1"></i>
          <span>{{ node.label }}</span>
        </span>
      </el-tree>
      <!-- 多选人员 可选部门-->
      <el-tree
        v-else-if="type === 'checkboxWithDepartment'"
        accordion
        :data="data"
        :props="props"
        show-checkbox
        node-key="mdn"
        :check-strictly="true"
        :filter-node-method="filterNode"
        @check-change="checkbox2"
        :default-checked-keys="defaultChecked"
        ref="treeCheck">
      </el-tree>
      <!-- 单选成员 -->
      <el-tree
        v-else-if="type === 'radioMember'"
        :data="data"
        node-key="data"
        :props="props"
        :filter-node-method="filterNode"
        ref="tree2"
        @node-click="radioMember">
        <span class="customNode" slot-scope="{ node, data }">
          <i class="iconfont icon-qunzu" v-if="data.isDep === 0"></i>
          <i class="iconfont icon-renyuan" v-if="data.isDep === 1"></i>
          <span>{{ node.label }}</span>
        </span>
      </el-tree>
      <!-- 单选部门 -->
      <el-tree
        v-else-if="type === 'radioDep'"
        :data="data"
        :props="props"
        :filter-node-method="filterNode" :default-expand-all="true"
        ref="tree2"
        @node-click="radioDep">
        <span class="customNode" slot-scope="{ node, data }">
<!--           <i class="iconfont icon-qunzu" v-if="data.isDep === 0"></i>
 -->          <i class="iconfont icon-qunzu"></i>
          <span>{{ node.label }}</span>
        </span>
      </el-tree>
    </el-scrollbar>
    <el-input style="width: 200px;" :type="inputType" v-model="nsdModel" slot="reference" :placeholder="placeholder" readonly="true" clearable @clear="clearChange" v-if="type !== 'checkbox'"></el-input>
    <el-input style="width: 200px;" :type="inputType" v-model="nsdModel" slot="reference" :placeholder="placeholder" readonly="true" v-if="type === 'checkbox'"></el-input>
  </el-popover>
</template>
<script>
export default {
  name: 'tree',
  data() {
    return {
      filterText: '',
      clearData: {
        id: null,
        name: '',
        mdn: ''
      }
    }
  },
  // 传递参数说明 props: 树的结构说明(参考el-element配置项), defaultCheck: 默认选中的节点, findId: 识别类型, readonly废弃(input框都是只读状态)
  props: ['data', 'nsd-model', 'type', 'width', 'search', 'textarea', 'props', 'defaultChecked', 'findId', 'placeholder', 'readonly'],
  computed: {
    /* treeType: function() {
      console.log('treeType', this.type)
      return this.type === 'checkbox'
    }, */
    inputType: function() {
      return this.textarea ? 'textarea' : 'text'
    },
    readOnlyType: function() {
      return this.readonly === true
    }
  },
  watch: {
    filterText(val) {
      this.$refs.treeCheck.filter(val)
    }
  },
  methods: {
    filterNode(value, data) {
      if (!value) return true
      return data.name.indexOf(value) !== -1
    },
    radioMember(data, checked, indeterminate) {
      // if (data.isDep)
      this.$emit('getTreeValue', data, this.findId)
      return
    },
    checkbox(data, checked, indeterminate) {
      const checkNodes = this.$refs.treeCheck.getCheckedNodes().filter((node) => {
        // 默认多选人员过滤掉部门
        if (!node.children || node.children.length === 0) {
          if (node.isDep !== 0) {
            return node
          }
        }
      })
      this.$emit('getTreeValue', checkNodes, this.findId)
    },
    checkbox2(data, checked, indeterminate) {
      const checkNodes = this.$refs.treeCheck.getCheckedNodes()
      this.$emit('getTreeValue', checkNodes, this.findId)
    },
    radioDep(data, checked, indeterminate) {
      if (!data.disabled) this.$emit('getTreeValue', data, this.findId)
      return
    },
    /* 隐藏时，清空搜索框 */
    hidePopover() {
      this.filterText = ''
    },
    clearChange() {
      this.$emit('getTreeValue', this.clearData, this.findId)
    }
  }
}
</script>
<style scoped>
.department{
  cursor: no-drop;
}

</style>
<style>
.el-scrollbar .scrollbar-wrapper{
  overflow: auto;
}
</style>

